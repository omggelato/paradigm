; OM File Header - Saved 2023/10/27 23:11:17
; (6.16 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 854 441) "" 908 0 nil "2023/10/27 23:11:17")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"is consonant.omp\""))
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "all vertical-intervals consonant" (quote ((let ((box (om-load-boxcall (quote abstraction) "all vertical-intervals consonant" (om-load-patch-abs1 "all vertical-intervals consonant" (quote ((let ((box (om-load-boxcall (quote genfun) "MAP2?AND" (quote map2?and) (quote ((om-load-inputfun (quote input-funbox) "" "FN" nil) (om-load-inputfun (quote input-funbox) "" "LIST1" nil) (om-load-inputfun (quote input-funbox) "" "LIST2" nil))) (om-make-point 76 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is consonant" (quote ("elements" "strict polyphonic voice-motion" "is consonant")) (quote ((om-load-inputfun (quote input-funbox) "" "x" nil) (om-load-inputfun (quote input-funbox) "" "y" nil))) (om-make-point 48 117) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 154 130) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLATTEN-SEQC" (quote flatten-seqc) (quote ((om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 165 66) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 153 260) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 185 3) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 0 1 nil 0) (2 1 0 2 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (0 0 4 0 nil 0))) 6.16 nil "" (om-make-point 598 154) (om-make-point 571 330)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 425/2 245/2) nil nil "l" "all vertical-intervals consonant"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "COMBINATIONS-OF2" (quote combinations-of2) (quote ((om-load-inputfun (quote input-funbox) "XS" "XS" nil))) (om-make-point 388 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAP?AND" (quote map?and) (quote ((om-load-inputfun (quote input-funbox) "" "FN" nil) (om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 304 239) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 50 595/2) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 426 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (0 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0))) nil 6.16))