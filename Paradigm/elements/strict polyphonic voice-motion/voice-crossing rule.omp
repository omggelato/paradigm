; OM File Header - Saved 2022/12/27 0:10:05
; (7.02 :patc (om-make-point 1155.9688 430) (om-make-point 536 50) (om-make-point 894 398) "" 908 0 "2021/06/06 11:09:39" "2022/11/08 18:05:55")
; End File Header
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "voice-crossing rule" (quote ((let ((box (om-load-boxcall (quote genfun) "MAP-ANDV" (quote t2l::map-andv) (quote ((om-load-inputfun (quote input-funbox) "" "FN" nil) (om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 211 344) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 312 260) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 283 260) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NSUCC" (quote t2l::nsucc) (quote ((om-load-inputfun (quote input-funbox) "INPUT" "INPUT" nil) (om-load-inputfun (quote input-funbox) "N" "N" nil) (om-load-inputkeyword (quote input-keyword) "" "step" (quote :step) nil nil))) (om-make-point 269 290) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 76 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLATTEN-SEQC" (quote t2l::flatten-seqc) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 41 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 27 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (xs)$  ; ((x1 y1) (x2 y2))$$  (or $   (or (null (caar xs))$       (null (caadr xs))$       (null (cadar xs))$       (null (cadadr xs)))$   (let ((x1 (caar xs))$         (x2 (caadr xs))$         (y1 (cadar xs))$         (y2 (cadadr xs)))$     (screamer:notv$      (screamer:orv$       (t2l::om<v (screamer:maxv x1 y1)$                  (screamer:minv x2 y2))$       (t2l::om>v (screamer:minv x1 y1)$                  (screamer:maxv x2 y2)))))))") (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 181 272) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 7 (om-make-point 505 45) "" "input" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 96 420) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 6 (om-make-point 465 45) "" "input" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 5 (om-make-point 425 45) "" "input" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vertical-intervals%12" 4 (om-make-point 305 45) "" "vertical-intervals%12" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice-intervals" 3 (om-make-point 215 45) "" "voice-intervals" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vertical-intervals" 2 (om-make-point 105 45) "" "vertical-intervals" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice2" 1 (om-make-point 55 45) "" "voice2" (list 69 70 69 67 69) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "cf" 0 (om-make-point 5 45) "" "cf" (list 62 67 65 64 62) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (3 0 0 1 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0) (1 0 3 2 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0) (16 0 6 0 nil 0) (15 0 6 1 nil 0) (0 0 9 0 nil 0))) nil 6.16))
