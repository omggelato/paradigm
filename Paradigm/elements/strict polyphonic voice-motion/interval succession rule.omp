; OM File Header - Saved 2023/10/26 15:00:16
; (6.16 :patc (om-make-point 612.9844 310) (om-make-point 57 222) (om-make-point 1364 441) "" 908 0 "2021/06/06 11:52:40" "2023/10/26 14:58:47")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "interval succession rule" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 439 202) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLATTEN-SEQC" (quote t2l::flatten-seqc) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 442 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 468 338) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (seqc-slices ivals%12)$  (labels$      ((is-stepv (x y) (let ((d (?- y x)))$                         (?and (?not (?= x y))$                               (?>= d -2)$                               (?<= d 2))))$       (perfect-intervalv (x) (or (null x) (?items-in x '(0 7))))$       (imperfect-intervalv (x) (or (null x) (?items-in x '(1 2 3 4 5 6 8 9 10 11))))$       (similar-motionv (xs ys)$         (or (or (null (car xs)) (null (cadr xs)) (null (car ys)) (null (cadr ys)))$             (?or$              (?and (?< (car xs) (cadr xs)) (?> (car ys) (cadr ys)))$              (?and (?> (car xs) (cadr xs)) (?> (car ys) (cadr ys))))))$       (oblique-motionv (xs ys)$         (or (or (null (car xs)) (null (cadr xs)) (null (car ys)) (null (cadr ys)))$             (?or $              (?and (?= (car xs) (cadr xs)) (?not (?= (car ys) (cadr ys))))$              (?and (?= (car ys) (cadr ys)) (?not (?= (car xs) (cadr xs)))))))$       (contrary-motionv (xs ys)$         (or (or (null (car xs)) (null (cadr xs)) (null (car ys)) (null (cadr ys)))$             (let ((xival (?- (cadr xs) (car xs)))$                   (yival (?- (cadr ys) (car ys))))$               (?or$                (?and (?<= xival -1) (?> yival 0))$                (?and (?<= yival -1) (?> xival 0)))))))$    $    (apply #'?and$            (mapcar $             #'(lambda (xs ys intervals)$                 (let* ((is-similar-motionv (similar-motionv xs ys))$                        (is-oblique-motionv (oblique-motionv xs ys))$                        (is-contrary-motionv (contrary-motionv xs ys))$                        (car-is-perfect-interval (perfect-intervalv (car intervals)))$                        (car-is-not-perfect-interval (screamer:notv car-is-perfect-interval))$                        (cadr-is-perfect-interval (perfect-intervalv (cadr intervals)))$                        (cadr-is-not-perfect-interval (screamer:notv cadr-is-perfect-interval)))$                   (cond $                    ((equalp xs ys) t)$                    (t$                     (?or$                                     ; perfect-to-perfect motion$                      (?and $                       car-is-perfect-interval$                       cadr-is-perfect-interval$                       (?or is-oblique-motionv is-contrary-motionv))$                                     ; imperfect-to-perfect motion$                      (?and$                       car-is-not-perfect-interval$                       cadr-is-perfect-interval$                       (?and (?or is-oblique-motionv is-contrary-motionv)$                             (is-stepv (car xs) (cadr xs))     ; ??$                             (is-stepv (car ys) (cadr ys))))$                                     ; perfect-to-imperfect$                      (?and$                       car-is-perfect-interval$                       cadr-is-not-perfect-interval$                       (?or is-similar-motionv is-oblique-motionv is-contrary-motionv))$                                     ; imperfect-to-imperfect$                      (?and$                       car-is-not-perfect-interval$                       cadr-is-not-perfect-interval$                       (?or is-similar-motionv is-oblique-motionv is-contrary-motionv)))$                     ))))$             (nsucc (flat (car (mat-trans seqc-slices))) 2 :step 1)$             (nsucc (flat (cadr (mat-trans seqc-slices))) 2 :step 1)$             (nsucc ivals%12 2 :step 1)))))") (quote ((om-load-inputfun (quote input-funbox) "" "SEQC-SLICES" nil) (om-load-inputfun (quote input-funbox) "" "IVALS%12" nil))) (om-make-point 515 431) nil (list (quote t)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 7 (om-make-point 825 45) "" "input" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 96 500) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "horizontal-intervals-scale-degrees" 6 (om-make-point 605 45) "" "horizontal-intervals-scale-degrees" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "horizontal-intervals%12" 5 (om-make-point 425 45) "" "horizontal-intervals%12" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vertical-intervals%12" 4 (om-make-point 305 45) "" "vertical-intervals%12" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice-intervals" 3 (om-make-point 215 45) "" "voice-intervals" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vertical-intervals" 2 (om-make-point 105 45) "" "vertical-intervals" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice2" 1 (om-make-point 55 45) "" "voice2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "cf" 0 (om-make-point 5 45) "" "cf" nil (om-make-point 66 58)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 0 0 nil 0) (11 0 0 1 nil 0) (0 0 1 0 nil 0) (1 0 2 0 nil 0) (2 0 3 0 nil 0) (8 0 3 1 nil 0) (3 0 5 0 nil 0))) nil 6.16))
