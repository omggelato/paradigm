; OM File Header - Saved 2023/10/27 23:11:17
; (6.16 :patc (om-make-point 10 160) (om-make-point 50 50) (om-make-point 718 339) "" 908 0 "2023/10/26 15:17:32" "2023/10/27 23:11:17")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"interval%12.omp\""))
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "is consonant - strict" (quote ((let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 135 430) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 347 52) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 247 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 115 312) (om-make-point 26 28) (quote t) "T" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 50 209) (om-make-point 97 28) (list 1 2 5 6 10 11) "(1 2 5 6 10 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?ITEMS!IN" (quote ?items!in) (quote ((om-load-inputfun (quote input-funbox) "" "LIST" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil) (om-load-inputkeyword (quote input-keyword) "" "numeric" (quote :numeric) nil nil))) (om-make-point 79 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "interval%12" (quote ("elements" "strict polyphonic voice-motion" "interval%12")) (quote ((om-load-inputfun (quote input-funbox) "" "x" nil) (om-load-inputfun (quote input-funbox) "" "y" nil))) (om-make-point 276 130) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (3 0 5 2 nil 0) (2 0 6 0 nil 0) (1 0 6 1 nil 0))) 6.16 nil "" (om-make-point 493 155) (om-make-point 500 380)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 348 217/2) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 279 142) (om-make-point 26 28) (quote t) "T" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 214 172) (om-make-point 91 56) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 152 114) (om-make-point 102 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "y" 1 (om-make-point 395 37) "" "y" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x" 0 (om-make-point 295 35) "" "x" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 192 271) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (4 0 0 1 nil 0) (3 0 2 0 nil 0) (0 0 2 1 nil 0) (1 0 2 2 nil 0) (5 0 3 0 nil 0) (4 0 3 1 nil 0) (2 0 6 0 nil 0))) nil 6.16))