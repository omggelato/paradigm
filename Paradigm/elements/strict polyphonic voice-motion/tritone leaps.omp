; OM File Header - Saved 2023/10/27 23:11:18
; (6.16 :patc (om-make-point 897.97657 190) (om-make-point 366 181) (om-make-point 483 370) "" 908 0 "2021/06/06 13:53:45" "2023/10/27 23:11:18")
; End File Header
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "tritone leaps" (quote ((let ((box (om-load-boxcall (quote abstraction) "process voice intervals" (om-load-patch-abs1 "process voice intervals" (quote ((let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 94 91) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "not a tritone" (om-load-lisp-abspatch "not a tritone" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x)$  (cond$   ((null x) T)$   (T (?/= 6 (?% x 12)))))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 21 145) nil nil "l" "not a tritone"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAP?AND" (quote map?and) (quote ((om-load-inputfun (quote input-funbox) "" "FN" nil) (om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 47 215) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?LISTDX" (quote ?listdx) (quote ((om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 84 152) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 5 280) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice" 0 (om-make-point 5 25) "" "voice" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (1 0 2 0 nil 0) (3 0 2 1 nil 0) (0 0 3 0 nil 0) (2 0 4 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 400 480)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 58 122) nil nil "l" "process voice intervals"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAP?AND" (quote map?and) (quote ((om-load-inputfun (quote input-funbox) "" "FN" nil) (om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 133 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 28 268) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" "input" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (3 0 1 1 nil 0) (1 0 2 0 nil 0))) nil 6.16))