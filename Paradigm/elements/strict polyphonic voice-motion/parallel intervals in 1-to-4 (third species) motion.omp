; OM File Header - Saved 2022/11/12 5:53:51
; (6.16 :patc (om-make-point 280 110) (om-make-point 50 50) (om-make-point 465 280) "" 908 0 "2022/11/10 14:16:59" "2022/11/12 5:28:18")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:voice-escmotion folder/is 4to1.omp\"" "#P\"C:voice-escmotion folder/1to4-motion.omp\""))
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "parallel intervals in 1-to-4 (third species) motion" (quote ((let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "voice1" nil) (om-load-inputfun (quote input-funbox) "" "voice2" nil))) (om-make-point 43 130) nil nil nil (list (let ((box (om-load-boxcall (quote abstraction) "rule definition" (om-load-patch-abs1 "rule definition" (quote ((let ((box (om-load-boxcall (quote abstraction) "apply rules to 1st and 3rd chords" (om-load-patch-abs1 "apply rules to 1st and 3rd chords" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 336) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chords" 0 (om-make-point 100 20) "" "chords" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMANDV" (quote t2l::omandv) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 204 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS 4" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 280 90) nil nil nil nil 5))) (setf (numouts box) 5) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "not both chords are octaves or unisons" (om-load-patch-abs1 "not both chords are octaves or unisons" (quote ((let ((box (om-load-boxcall (quote genfun) "OMNOTV" (quote t2l::omnotv) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 179 386) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMANDV" (quote t2l::omandv) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 149 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 761/3 200) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "intervalm12 equals 2" (om-load-patch-abs1 "intervalm12 equals" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 411) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 147 282) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 72 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=V" (quote t2l::om=v) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 109 344) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 107 258) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM%V" (quote t2l::om%v) (quote ((om-load-inputfun (quote input-funbox) "" "N" nil) (om-load-inputfun (quote input-funbox) "" "D" nil))) (om-make-point 85 288) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ABSV" (quote t2l::absv) (quote ((om-load-inputfun (quote input-funbox) "K" "K" nil))) (om-make-point 72 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-V" (quote t2l::om-v) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 73 175) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 62 112) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (5 0 3 0 nil 0) (1 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (8 1 7 1 nil 0) (2 0 8 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 563/3 230) nil nil nil "intervalm12 equals"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 401/3 200) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "intervalm12 equals" (om-load-patch-abs1 "intervalm12 equals" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 411) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 147 282) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 72 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=V" (quote t2l::om=v) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 109 344) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 107 258) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM%V" (quote t2l::om%v) (quote ((om-load-inputfun (quote input-funbox) "" "N" nil) (om-load-inputfun (quote input-funbox) "" "D" nil))) (om-make-point 85 288) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ABSV" (quote t2l::absv) (quote ((om-load-inputfun (quote input-funbox) "K" "K" nil))) (om-make-point 72 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-V" (quote t2l::om-v) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 73 175) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 62 112) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (5 0 3 0 nil 0) (1 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (8 1 7 1 nil 0) (2 0 8 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 203/3 230) nil nil nil "intervalm12 equals"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 33 406) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chord2" 1 (om-make-point 155 45) "" "chord2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chord1" 0 (om-make-point 55 45) "" "chord1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 1 0 nil 0) (3 0 1 1 nil 0) (7 0 3 0 nil 0) (2 0 3 1 nil 0) (8 0 5 0 nil 0) (4 0 5 1 nil 0) (0 0 6 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 380)) (quote ((om-load-inputfun (quote input-funbox) "" "chord1" nil) (om-load-inputfun (quote input-funbox) "" "chord2" nil))) (om-make-point 219 152) nil nil nil "not both chords are octaves or unisons"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "not both chords are 5ths" (om-load-patch-abs1 "not both chords are 5ths" (quote ((let ((box (om-load-boxcall (quote genfun) "OMNOTV" (quote t2l::omnotv) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 153 384) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMANDV" (quote t2l::omandv) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 149 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 761/3 200) (om-make-point 26 28) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "intervalm12 equals 2" (om-load-patch-abs1 "intervalm12 equals" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 411) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 147 282) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 72 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=V" (quote t2l::om=v) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 109 344) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 107 258) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM%V" (quote t2l::om%v) (quote ((om-load-inputfun (quote input-funbox) "" "N" nil) (om-load-inputfun (quote input-funbox) "" "D" nil))) (om-make-point 85 288) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ABSV" (quote t2l::absv) (quote ((om-load-inputfun (quote input-funbox) "K" "K" nil))) (om-make-point 72 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-V" (quote t2l::om-v) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 73 175) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 62 112) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (5 0 3 0 nil 0) (1 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (8 1 7 1 nil 0) (2 0 8 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 563/3 230) nil nil nil "intervalm12 equals"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 401/3 200) (om-make-point 26 28) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "intervalm12 equals" (om-load-patch-abs1 "intervalm12 equals" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 411) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 147 282) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 72 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=V" (quote t2l::om=v) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 109 344) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 107 258) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM%V" (quote t2l::om%v) (quote ((om-load-inputfun (quote input-funbox) "" "N" nil) (om-load-inputfun (quote input-funbox) "" "D" nil))) (om-make-point 85 288) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ABSV" (quote t2l::absv) (quote ((om-load-inputfun (quote input-funbox) "K" "K" nil))) (om-make-point 72 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-V" (quote t2l::om-v) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 73 175) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 62 112) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (5 0 3 0 nil 0) (1 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (8 1 7 1 nil 0) (2 0 8 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 360)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 203/3 230) nil nil nil "intervalm12 equals"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 33 406) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chord2" 1 (om-make-point 155 45) "" "chord2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chord1" 0 (om-make-point 55 45) "" "chord1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 1 0 nil 0) (3 0 1 1 nil 0) (7 0 3 0 nil 0) (2 0 3 1 nil 0) (8 0 5 0 nil 0) (4 0 5 1 nil 0) (0 0 6 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 320)) (quote ((om-load-inputfun (quote input-funbox) "" "chord1" nil) (om-load-inputfun (quote input-funbox) "" "chord2" nil))) (om-make-point 97 152) nil nil nil "not both chords are 5ths"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS 3" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 120 90) nil nil nil nil 5))) (setf (numouts box) 5) box))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (5 0 2 0 nil 0) (4 0 2 1 nil 0) (1 0 3 0 nil 0) (3 2 4 0 nil 0) (3 4 4 1 nil 0) (6 2 5 0 nil 0) (6 4 5 1 nil 0) (1 0 6 0 nil 0))) 6.16 nil "" (om-make-point 528 169) (om-make-point 685 391)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 4570/13 3362/13) nil nil nil "apply rules to 1st and 3rd chords"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 155 113) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 105 429) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0))) 6.16 nil "" (om-make-point 200 64) (om-make-point 831 456)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 209 233) (om-make-point 77 66) nil nil "rule definition"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 249 296) (om-make-point 24 28) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 229 326) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 142 386) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GROUP-BY-MOTION-TYPE" (quote t2l::group-by-motion-type) (quote ((om-load-inputfun (quote input-funbox) "" "VOICE1" nil) (om-load-inputfun (quote input-funbox) "" "VOICE2" nil))) (om-make-point 3 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "select motion type 2" (om-load-patch-abs1 "select motion type" (quote ((let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 121 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is 4to1" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "is 4to1")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 62 62 62 62 59) (list 66 67 64 66 67))))) (om-make-point 164 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "1to4-motion" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "1to4-motion")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 62 62 62 62 60) (list 62 64 65 67 69))))) (om-make-point 63 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 0 1 nil 0) (4 0 1 0 nil 0) (4 0 2 0 nil 0) (0 0 3 0 nil 0))) 6.16 nil "" (om-make-point 35 29) (om-make-point 500 360)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 89 233) nil nil nil "select motion type"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "select motion type" (om-load-lisp-abspatch "select motion type" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (input)$  ;; filter-by-motion-type$  T)") (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil))) (om-make-point 229 61) nil nil "l" "select motion type"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMANDV" (quote t2l::omandv) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 189 451) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 52 171) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice2" 1 (om-make-point 78 45) "" "voice2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice1" 0 (om-make-point 8 45) "" "voice1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 192 508) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 92 508) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((8 0 0 0 nil 0) (5 0 2 0 nil 0) (0 0 2 1 nil 0) (1 0 2 2 nil 0) (2 0 3 0 nil 0) (10 0 4 0 nil 0) (9 0 4 1 nil 0) (8 0 5 0 nil 0) (3 1 7 0 nil 0) (4 0 8 0 nil 0) (7 0 11 0 nil 0) (3 0 12 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 8" 7 (om-make-point 525 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 7" 6 (om-make-point 475 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 6" 5 (om-make-point 435 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vertical-intervals%12" 4 (om-make-point 315 45) "" "vertical-intervals%12" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice-intervals" 3 (om-make-point 245 45) "" "voice-intervals" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vertical-intervals" 2 (om-make-point 145 45) "" "vertical-intervals" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice2" 1 (om-make-point 95 45) "" "voice2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice1" 0 (om-make-point 12 45) "" "voice1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 0 0 nil 0) (7 0 0 1 nil 0) (0 0 8 0 nil 0))) nil 6.16))
