; OM File Header - Saved 2022/12/21 5:19:44
; (6.16 :patc (om-make-point 1161.9688 490) (om-make-point 143 115) (om-make-point 1165 183) "" 908 0 "2021/06/23 2:25:59" "2022/12/21 5:19:44")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:is a leap.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "voice2-escmotion" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 375 409) (om-make-point 31 28) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 334 409) (om-make-point 32 28) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "OM-V" (quote t2l::om-v) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 357 439) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 357 439)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "MAP-ANDV" (quote t2l::map-andv) (quote ((om-load-inputfun (quote input-funbox) "" "FN" nil) (om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 129 372) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 129 372)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 75 184) (om-make-point 24 28) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 54 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "HAS-NULL-VALUES" (quote t2l::has-null-values) (quote ((om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 12 128) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 12 128)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (let ((newbox (om-load-boxcall (quote genfun) "OM>=V 2" (quote t2l::om>=v) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 788 66) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 788 66)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "OM>=V" (quote t2l::om>=v) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 655 102) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 655 102)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "OM<=V 2" (quote t2l::om<=v) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 851 57) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 851 57)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "OM<=V" (quote t2l::om<=v) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 576 102) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 576 102)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NOTV 2" (quote screamer:notv) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 178 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is a leap 2" (quote ("elements" "paradigms" "myparadigm 3" "is a leap")) (quote ((om-load-inputfun (quote input-funbox) "" "x1" nil) (om-load-inputfun (quote input-funbox) "" "x2" nil))) (om-make-point 160 128) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ANDV" (quote screamer:andv) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 540 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ANDV 2" (quote screamer:andv) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 440 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ORV" (quote screamer:orv) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 380 340) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NOTV" (quote screamer:notv) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 92 267) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is a leap" (quote ("elements" "paradigms" "myparadigm 3" "is a leap")) (quote ((om-load-inputfun (quote input-funbox) "" "x1" nil) (om-load-inputfun (quote input-funbox) "" "x2" nil))) (om-make-point 110 128) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 76 430) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x3" 2 (om-make-point 186 50) "" "x3" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x2" 1 (om-make-point 151 50) "" "x2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x1" 0 (om-make-point 116 50) "" "x1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((14 0 0 0 nil 0) (13 0 0 1 nil 0) (13 0 1 0 nil 0) (12 0 1 1 nil 0) (13 0 2 0 nil 0) (12 0 2 1 nil 0) (14 0 3 0 nil 0) (13 0 3 1 nil 0) (5 0 4 0 nil 0) (13 0 5 0 nil 0) (12 0 5 1 ((om-make-point 196 106) (om-make-point 195 117) (om-make-point 192 117) (om-make-point 192 128)) 0) (10 0 6 0 nil 0) (4 0 6 1 nil 0) (0 0 6 2 nil 0) (2 0 6 3 nil 0) (10 0 7 0 nil 0) (4 0 7 1 nil 0) (3 0 7 2 nil 0) (1 0 7 3 nil 0) (9 0 8 0 nil 0) (7 0 8 1 nil 0) (6 0 8 2 nil 0) (10 0 9 0 nil 0) (14 0 10 0 nil 0) (13 0 10 1 nil 0) (8 0 11 0 nil 0))) 6.16 nil "" (om-make-point 302 97) (om-make-point 930 402)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 123 205) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 116 135) nil nil nil nil 3))) (setf (numouts box) 3) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 54 292) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 114 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (0 0 1 1 nil 0) (3 0 1 2 ((om-make-point 147 269) (om-make-point 113 269) (om-make-point 112 221) (om-make-point 78 220) (om-make-point 78 225)) 0) (6 0 2 0 nil 0) (4 0 3 0 nil 0) (4 1 3 1 nil 0) (4 2 3 2 nil 0) (6 0 4 0 nil 0) (1 0 5 0 nil 0))) 6.16 nil "" (om-make-point 676 182) (om-make-point 490 299)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 77 276) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 183 244) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 174 244) (om-make-point 26 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "NSUCC" (quote t2l::nsucc) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "N" nil) (om-load-inputkeyword (quote input-keyword) "" "step" (quote :step) nil nil))) (om-make-point 160 274) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 160 274)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 110 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 7 (om-make-point 805 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 96 500) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "horizontal-intervals-scale-degrees" 6 (om-make-point 605 45) "" "horizontal-intervals-scale-degrees" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vertical-intervals-scale-degrees" 5 (om-make-point 425 45) "" "vertical-intervals-scale-degrees" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vertical-intervals%12" 4 (om-make-point 305 45) "" "vertical-intervals%12" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice-intervals" 3 (om-make-point 215 45) "" "voice-intervals" (list (list -5 1 1 1 1 1 1)) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vertical-intervals" 2 (om-make-point 105 45) "" "vertical-intervals" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice2" 1 (om-make-point 55 45) "" "voice2" (list 1 (list 2 22) 20) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice1" 0 (om-make-point 5 45) "" "voice1" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 2 0 nil 0) (0 0 2 1 nil 0) (4 0 3 0 nil 0) (7 0 3 1 nil 0) (8 0 7 0 nil 0) (6 0 7 1 nil 0) (5 0 7 2 nil 0) (16 0 8 0 nil 0) (3 0 10 0 nil 0))) nil 6.16))
