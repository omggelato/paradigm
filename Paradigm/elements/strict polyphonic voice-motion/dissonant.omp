; OM File Header - Saved 2022/11/08 18:05:55
; (6.16 :patc (om-make-point 10 160) (om-make-point 530 174) (om-make-point 500 260) "" 183 0 "2022/10/06 23:20:04" "2022/11/08 18:05:55")
; End File Header
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "dissonant interval" (quote ((let ((box (om-load-boxcall (quote lispfun) "NULL 2" (quote null) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 233 284) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SOME" (quote some) (quote ((om-load-inputfun (quote input-funbox) "PREDICATE" "PREDICATE" nil) (om-load-inputfun (quote input-funbox) "FIRST-SEQUENCE" "FIRST-SEQUENCE" nil))) (om-make-point 255 334) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 5" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 185 424) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 373 5) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 303 8) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-V" (quote t2l::om-v) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 338 60) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 330 235) (om-make-point 113 28) (list 1 2 5 6 10 11 nil) "(1 2 5 6 10 11 nil)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 382 88) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "%V 2" (quote t2l::%v) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil) (om-load-inputfun (quote input-funbox) "D" "D" nil))) (om-make-point 368 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMMEMBERV 2" (quote t2l::ommemberv) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil))) (om-make-point 373 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 272 88) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "%V" (quote t2l::%v) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil) (om-load-inputfun (quote input-funbox) "D" "D" nil))) (om-make-point 258 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ATOM" (quote atom) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 105 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 160 279) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 129 345) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMMEMBERV" (quote t2l::ommemberv) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil))) (om-make-point 263 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 78 487) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (16 0 1 1 nil 0) (1 0 2 0 nil 0) (14 0 2 2 nil 0) (16 0 3 0 nil 0) (16 0 4 0 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (5 0 8 0 nil 0) (7 0 8 1 nil 0) (8 0 9 0 nil 0) (6 0 9 1 nil 0) (16 0 11 0 nil 0) (10 0 11 1 nil 0) (16 0 12 0 nil 0) (12 0 13 0 nil 0) (15 0 13 1 nil 0) (16 0 14 0 nil 0) (13 0 14 1 nil 0) (11 0 15 0 nil 0) (6 0 15 1 nil 0) (2 0 17 0 nil 0))) nil 6.16))