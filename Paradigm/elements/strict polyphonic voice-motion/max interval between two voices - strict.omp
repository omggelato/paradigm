; OM File Header - Saved 2023/10/27 23:11:17
; (6.16 :patc (om-make-point 603.9844 610) (om-make-point 50 50) (om-make-point 376 243) "" 908 0 "2023/10/26 16:04:05" "2023/10/27 23:11:17")
; End File Header
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "max interval between two voices - strict" (quote ((let ((box (om-load-boxin "max allowed interval" 1 (om-make-point 115 45) "" "max allowed interval" 19 nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "span is less than max allowed" (om-load-lisp-abspatch "span is less than max allowed" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (xs max) $  (or (null (car xs))$      (null (cadr xs))$      (null max)$      (null xs) ; unnecessary$      (= 1 (length xs))$      (?<= (?- (?listmax xs)$               (?listmin xs))$           max)))") (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "MAX" nil))) (om-make-point 34 108) nil nil "l" "span is less than max allowed"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAP?AND" (quote map?and) (quote ((om-load-inputfun (quote input-funbox) "" "FN" nil) (om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 175 188) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 247 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLATTEN-SEQC" (quote t2l::flatten-seqc) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 243 61) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 46 203) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice1 and voice2" 0 (om-make-point 230 0) "" "voice1 and voice2" (list 55 (list 55 57) 58 60 nil) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 1 nil 0) (1 0 2 0 nil 0) (3 0 2 1 nil 0) (4 0 3 0 nil 0) (6 0 4 0 nil 0) (2 0 5 0 nil 0))) nil 6.16))