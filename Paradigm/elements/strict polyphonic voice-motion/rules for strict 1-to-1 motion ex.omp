; OM File Header - Saved 2023/10/27 23:11:18
; (6.16 :patc (om-make-point 77.0 130) (om-make-point 503 0) (om-make-point 863 370) "" 908 0 "2022/12/24 23:23:45" "2023/10/27 23:08:26")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"dissonance-consonance rule 3.omp\"" "#P\"leaps to octaves 2.omp\"" "#P\"all vertical-intervals consonant.omp\"" "#P\"unison ending rule 2.omp\"" "#P\"prepared cadence rule 2.omp\"" "#P\"voice-overlap rule - 1-input.omp\"" "#P\"no voice should make a leap greater than a 5th except with an ascending m6 - 1 input.omp\"" "#P\"is consonant.omp\"" "#P\"dissonance-consonance rule 2.omp\"" "#P\"octaves ban.omp\"" "#P\"voice-crossing.omp\"" "#P\"consecutive open intervals 2.omp\"" "#P\"tritones across voices.omp\"" "#P\"opening 5th or octave.omp\"" "#P\"transposition.omp\"" "#P\"tritone leaps.omp\""))
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "rules for strict 1-to-1 motion ex" (quote ((let ((box (om-load-boxcall (quote patch-box) "dissonance-consonance rule 3" (quote ("elements" "strict polyphonic voice-motion" "dissonance-consonance rule 3")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 880 184) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "mode-pcset" 1 (om-make-point 155 45) "" "mode-pcset" (list 2 4 5 7 9 10 0) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "leaps to octaves" (quote ("elements" "strict polyphonic voice-motion" "leaps to octaves 2")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 408 330) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "all vertical-intervals consonant" (quote ("elements" "strict polyphonic voice-motion" "all vertical-intervals consonant")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 194 326) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "unison ending rule" (quote ("elements" "strict polyphonic voice-motion" "unison ending rule 2")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 830 292) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "prepared cadence rule" (quote ("elements" "strict polyphonic voice-motion" "prepared cadence rule 2")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 662 250) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "voice-overlap rule - 1-input" (quote ("elements" "strict polyphonic voice-motion" "voice-overlap rule - 1-input")) (quote ((om-load-inputfun (quote input-funbox) "" "sequence" (list (list 60 62 64) (list 67 65 67) (list 70 69 67))))) (om-make-point 333 5) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "no voice should make a leap greater than a 5th except with an ascending m6 - 1 input" (quote ("elements" "strict polyphonic voice-motion" "no voice should make a leap greater than a 5th except with an ascending m6 - 1 input")) (quote ((om-load-inputfun (quote input-funbox) "" "sequence" nil))) (om-make-point 449 31) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcall (quote genfun) "MAP2?AND" (quote map2?and) (quote ((om-load-inputfun (quote input-funbox) "" "FN" nil) (om-load-inputfun (quote input-funbox) "" "LIST1" nil) (om-load-inputfun (quote input-funbox) "" "LIST2" nil))) (om-make-point 119 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is consonant 2" (quote ("elements" "strict polyphonic voice-motion" "is consonant")) (quote ((om-load-inputfun (quote input-funbox) "" "x" nil) (om-load-inputfun (quote input-funbox) "" "y" nil))) (om-make-point 73 128) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 206 122) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLATTEN-SEQC" (quote flatten-seqc) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 117 78) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 7 291) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is consonant" (quote ("elements" "strict polyphonic voice-motion" "is consonant")) (quote ((om-load-inputfun (quote input-funbox) "" "x" nil) (om-load-inputfun (quote input-funbox) "" "y" nil))) (om-make-point 501 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 0 1 nil 0) (2 1 0 2 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (0 0 4 0 nil 0))) 6.16 nil "" (om-make-point 663 145) (om-make-point 533 467)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 236 83) nil nil "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAP?AND" (quote map?and) (quote ((om-load-inputfun (quote input-funbox) "" "FN" nil) (om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 254 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "COMBINATIONS-OF2" (quote combinations-of2) (quote ((om-load-inputfun (quote input-funbox) "XS" "XS" nil))) (om-make-point 316 87) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 0 nil 0) (1 0 3 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 526 332)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 60 21) nil nil "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "dissonance-consonance rule 2" (quote ("elements" "strict polyphonic voice-motion" "dissonance-consonance rule 2")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 759 223/2) nil nil "l" "dissonance-consonance rule 2" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "octaves ban 2" (quote ("elements" "strict polyphonic voice-motion" "octaves ban")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 333 89) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "voice-crossing" (quote ("elements" "strict polyphonic voice-motion" "voice-crossing")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 585 219) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "consecutive open intervals" (quote ("elements" "strict polyphonic voice-motion" "consecutive open intervals 2")) (quote ((om-load-inputfun (quote input-funbox) "" "sequence" (list (list 60 62 64) (list 67 65 64) (list 72 72 72))))) (om-make-point 572 97) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 2 286) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ASSERT!! 2" (quote assert!!) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 0 237) (om-make-point 480 47) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "tritones across voices" (quote ("elements" "strict polyphonic voice-motion" "tritones across voices")) (quote ((om-load-inputfun (quote input-funbox) "" "sequence" nil))) (om-make-point 353 429) nil nil "l" "tritones across voices" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "opening 5th or octave" (quote ("elements" "strict polyphonic voice-motion" "opening 5th or octave")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 253 2) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "modality rule" (quote ("elements" "strict polyphonic voice-motion" "transposition")) (quote ((om-load-inputfun (quote input-funbox) "" "sequence" nil) (om-load-inputfun (quote input-funbox) "" "scale-pcset" nil))) (om-make-point 107 106) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "no tritone leaps" (quote ("elements" "strict polyphonic voice-motion" "tritone leaps")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 413 87) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 14 0 nil 0) (13 0 15 0 nil 0) (18 0 15 1 nil 0) (17 0 15 2 nil 0) (19 0 15 3 nil 0) (12 0 15 4 nil 0) (11 0 15 5 nil 0) (8 0 15 7 nil 0) (7 0 15 8 nil 0) (6 0 15 9 nil 0) (5 0 15 10 nil 0) (3 0 15 11 nil 0) (0 0 15 12 nil 0) (4 0 15 13 nil 0) (2 0 15 14 nil 0) (1 0 18 1 nil 0))) nil 6.16))
