; OM File Header - Saved 2021/06/16 10:13:19
; (6.16 :patc (om-make-point 10.0 70) (om-make-point 38 0) (om-make-point 990 522) "" 908 0 "2021/06/08 16:32:46" "2021/06/16 9:59:50")
; End File Header
(in-package :om)(load-lib-for (quote "paradigms"))(setf *om-current-persistent* (om-load-patch1 "rule template for merge-voice-sequences" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 696 317) (om-make-point 24 28) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 664 266) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 654 296) (om-make-point 32 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 684 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 749 193) (om-make-point 24 28) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 690 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 709 223) nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "current segment" 7 (om-make-point 765 45) "" "current segment" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "merged sequences" 6 (om-make-point 655 45) "" "merged sequences" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice-intervals" 5 (om-make-point 522 45) "" "voice-intervals" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "next chord" 4 (om-make-point 425 45) "" "next chord" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "last chord" 3 (om-make-point 315 45) "" "last chord" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "position-idx" 2 (om-make-point 196 45) "" "position-idx" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 650 416) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "output variable" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "next sequence" 1 (om-make-point 105 45) "" "next sequence" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "last sequence" 0 (om-make-point 5 45) "" "last sequence" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (0 0 3 1 nil 0) (6 3 3 2 nil 0) (7 0 5 0 nil 0) (12 0 6 0 nil 0) (5 0 6 1 nil 0) (4 0 6 3 nil 0) (3 0 13 0 nil 0))) nil 6.16))
