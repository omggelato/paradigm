; OM File Header - Saved 2022/11/08 18:05:55
; (6.16 :patc (om-make-point 10.0 70) (om-make-point 315 142) (om-make-point 1158 600) "" 908 0 "2021/06/15 18:01:55" "2022/11/08 18:05:55")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:../is a step.omp\""))
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "species2 voice leaps" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 409 407) (om-make-point 24 28) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 392 362) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 382 392) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 397 437) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ORV" (quote screamer:orv) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 675 584) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ANDV 6" (quote screamer:andv) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1045 565) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL>V" (quote t2l::all>v) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 809 506) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ANDV 5" (quote screamer:andv) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 785 565) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL<V" (quote t2l::all<v) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 1065 509) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 804 254) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ANDV 4" (quote screamer:andv) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 945 485) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 990 407) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "<V" (quote screamer:<v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 976 437) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 887 427) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) ">=V" (quote screamer:>=v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 871 457) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ANDV 3" (quote screamer:andv) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 765 505) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NOTV" (quote screamer:notv) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 729 460) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ANDV 2" (quote screamer:andv) (quote nil) (om-make-point 749 309) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is-tonal-stepv 2" (quote ("elements" "paradigms" "textural motion i" "is a step")) (quote ((om-load-inputfun (quote input-funbox) "" "x1" nil) (om-load-inputfun (quote input-funbox) "" "x2" nil))) (om-make-point 660 332) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ANDV" (quote screamer:andv) (quote nil) (om-make-point 856 320) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADR 4" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 911 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR 2" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 938 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 931 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADR 3" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 884 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 536 138) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 508 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 507 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 277 250) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 301 330) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 198 422) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LISTP 2" (quote listp) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 41 257) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 101 279) (om-make-point 24 28) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 81 309) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADR 2" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 108 134) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is-tonal-stepv" (quote ("elements" "paradigms" "textural motion i" "is a step")) (quote ((om-load-inputfun (quote input-funbox) "" "x1" nil) (om-load-inputfun (quote input-funbox) "" "x2" nil))) (om-make-point 98 218) (om-make-point 86 66) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADADR" (quote cadadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 321 131) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "current segment" 7 (om-make-point 765 45) "" "current segment" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "merged sequences" 6 (om-make-point 655 45) "" "merged sequences" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice-intervals" 5 (om-make-point 522 45) "" "voice-intervals" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "next chord" 4 (om-make-point 425 45) "" "next chord" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "last chord" 3 (om-make-point 315 45) "" "last chord" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "position-idx" 2 (om-make-point 196 45) "" "position-idx" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "next sequence" 1 (om-make-point 105 45) "" "next sequence" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "last sequence" 0 (om-make-point 5 45) "" "last sequence" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((41 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (0 0 3 1 nil 0) (28 1 3 2 nil 0) (18 0 4 0 nil 0) (7 0 4 1 nil 0) (5 0 4 2 nil 0) (10 0 5 0 nil 0) (8 0 5 1 nil 0) (9 0 6 0 nil 0) (15 0 7 0 nil 0) (6 0 7 1 nil 0) (9 0 8 0 nil 0) (22 0 9 0 nil 0) (16 0 10 0 nil 0) (12 0 10 1 nil 0) (11 0 12 1 nil 0) (13 0 14 1 nil 0) (16 0 15 0 nil 0) (14 0 15 1 nil 0) (18 0 16 0 nil 0) (20 0 18 0 nil 0) (21 0 18 1 nil 0) (22 0 20 0 nil 0) (22 0 21 0 nil 0) (23 0 22 0 nil 0) (36 0 23 0 nil 0) (36 0 24 0 nil 0) (26 0 25 0 nil 0) (24 0 26 0 nil 0) (36 0 27 0 nil 0) (27 0 28 0 nil 0) (4 0 28 1 nil 0) (3 0 29 0 nil 0) (35 0 30 0 nil 0) (30 0 32 0 nil 0) (34 0 32 1 nil 0) (31 0 32 2 nil 0) (35 0 33 0 nil 0) (33 0 34 0 nil 0) (25 0 34 1 nil 0) (36 0 35 0 nil 0))) nil 6.16))