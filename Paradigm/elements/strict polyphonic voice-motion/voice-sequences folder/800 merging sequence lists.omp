; OM File Header - Saved 2022/11/08 18:05:55
; (6.16 :patc (om-make-point 10 10) (om-make-point 502 14) (om-make-point 763 727) "" 183 0 "2021/06/12 22:27:55" "2022/11/08 18:05:55")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:../modality.omp\""))
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "800 merging sequence lists" (quote ((let ((box (om-load-boxcall (quote genfun) "MP-SOLVER 4" (quote t2l::mp-solver) (quote ((om-load-inputfun (quote input-funbox) "" "I" nil) (om-load-inputfun (quote input-funbox) "" "FORM1" nil) (om-load-inputfun (quote input-funbox) "" "POINTS-SYSTEM-FUNCTIONS" nil))) (om-make-point 593 719) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOLVER-INPUT 3" (quote t2l::solver-input) (quote nil) (om-make-point 589 617) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote patch-box) "distinct-values-points-system-function" (quote ("elements" "music-custom" "textural motion i" "distinct-values-points-system-function 2")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 585 651) nil nil "l" nil 1))) (setf (frame-position newbox) (om-make-point 585 651)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 128 321) (om-make-point 123 28) (list 2 4 5 7 9 110 11 0) "(2 4 5 7 9 110 11 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MP-SOLVER 3" (quote t2l::mp-solver) (quote ((om-load-inputfun (quote input-funbox) "" "I" nil) (om-load-inputfun (quote input-funbox) "" "FORM1" nil))) (om-make-point 508 269) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "modality 2" (quote ("elements" "paradigms" "textural motion i" "modality")) (quote ((om-load-inputfun (quote input-funbox) "" "voice1" nil) (om-load-inputfun (quote input-funbox) "" "voice2" nil) (om-load-inputfun (quote input-funbox) "" "vertical-intervals" nil) (om-load-inputfun (quote input-funbox) "" "voice-intervals" nil) (om-load-inputfun (quote input-funbox) "" "vertical-intervals%12" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "mode-pcset" nil))) (om-make-point 664 378) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote patch-box) "modality" (quote ("elements" "music-custom" "textural motion i" "modality 2")) (quote ((om-load-inputfun (quote input-funbox) "" "cf" nil) (om-load-inputfun (quote input-funbox) "" "voice2" nil) (om-load-inputfun (quote input-funbox) "" "vertical-intervals" nil) (om-load-inputfun (quote input-funbox) "" "voice-intervals" nil) (om-load-inputfun (quote input-funbox) "" "vertical-intervals%12" nil) (om-load-inputfun (quote input-funbox) "" "horizontal-intervals%12" nil) (om-load-inputfun (quote input-funbox) "" "horizontal-intervals-scale-degrees" nil) (om-load-inputfun (quote input-funbox) "" "sequence%12" nil) (om-load-inputfun (quote input-funbox) "" "mode-pcset" nil))) (om-make-point 600 298) nil nil "l" nil 1))) (setf (frame-position newbox) (om-make-point 600 298)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 599 216) (om-make-point 101 28) (list 2 4 5 7 9 10 0) "(2 4 5 7 9 10 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RESET-SOLVER" (quote t2l::reset-solver) (quote nil) (om-make-point 422 620) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HIDE-WARNINGS" (quote t2l::hide-warnings) (quote nil) (om-make-point 424 706) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRINT-WARNINGS" (quote t2l::print-warnings) (quote nil) (om-make-point 320 660) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote patch-box) "no repeated notes in voice" (quote ("elements" "music-custom" "textural motion i" "no repeated notes in voice 2")) (quote ((om-load-inputfun (quote input-funbox) "" "cf" nil) (om-load-inputfun (quote input-funbox) "" "voice2" nil) (om-load-inputfun (quote input-funbox) "" "vertical-intervals" nil) (om-load-inputfun (quote input-funbox) "" "voice-intervals" nil) (om-load-inputfun (quote input-funbox) "" "vertical-intervals%12" nil) (om-load-inputfun (quote input-funbox) "" "vertical-intervals-scale-degrees" nil) (om-load-inputfun (quote input-funbox) "" "horizontal-intervals-scale-degrees" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 467 349) nil nil "l" nil 1))) (setf (frame-position newbox) (om-make-point 467 349)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MP-SOLVER-PROCESS-STATUS" (quote t2l::mp-solver-process-status) (quote nil) (om-make-point 542 431) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUSPEND-MP-SOLVER-PROCESS" (quote t2l::suspend-mp-solver-process) (quote nil) (om-make-point 67 672) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 118 202) (om-make-point 39 42) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MP-SOLVER 2" (quote t2l::mp-solver) (quote ((om-load-inputfun (quote input-funbox) "" "I" nil) (om-load-inputfun (quote input-funbox) "" "FORM1" nil))) (om-make-point 213 639) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOLVER-INPUT 2" (quote t2l::solver-input) (quote nil) (om-make-point 219 577) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOLVER-INPUT" (quote t2l::solver-input) (quote nil) (om-make-point 79 467) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MP-SOLVER" (quote t2l::mp-solver) (quote ((om-load-inputfun (quote input-funbox) "" "I" nil) (om-load-inputfun (quote input-funbox) "" "FORM1" nil) (om-load-inputfun (quote input-funbox) "" "POINTS-SYSTEM-FUNCTIONS" nil))) (om-make-point 83 569) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 210 461) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote patch-box) "voice contour-based points system" (quote ("elements" "music-custom" "textural motion i" "voice contour-based points system")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "process-mode" 3))) (om-make-point 92 491) nil nil "l" nil 1))) (setf (frame-position newbox) (om-make-point 92 491)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SETF-SOLVER-INPUT" (quote t2l::setf-solver-input) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 374 485) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote patch-box) "textural-motion-ii - relaxed mode" (quote ("elements" "music-custom" "textural motion i" "textural-motion-ii - relaxed mode")) (quote ((om-load-inputfun (quote input-funbox) "" "voice1" nil) (om-load-inputfun (quote input-funbox) "" "voice2" nil) (om-load-inputfun (quote input-funbox) "" "mode-pcset" nil))) (om-make-point 0 351) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 0 351)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOLVER-OUTPUT" (quote t2l::solver-output) (quote nil) (om-make-point 81 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TERMINATE-MP-SOLVER-PROCESS" (quote t2l::terminate-mp-solver-process) (quote nil) (om-make-point 523 521) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ASSERT!" (quote t2l::om-assert!) (quote ((om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil))) (om-make-point 378 425) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote patch-box) "linked-segments-rule" (quote ("elements" "music-custom" "textural motion i" "linked-segments-rule 1")) (quote ((om-load-inputfun (quote input-funbox) "" "last sequence" nil) (om-load-inputfun (quote input-funbox) "" "next sequence" nil) (om-load-inputfun (quote input-funbox) "" "position-idx" nil) (om-load-inputfun (quote input-funbox) "" "last chord" nil) (om-load-inputfun (quote input-funbox) "" "next chord" nil) (om-load-inputfun (quote input-funbox) "" "voice-intervals" nil) (om-load-inputfun (quote input-funbox) "" "merged sequences" nil) (om-load-inputfun (quote input-funbox) "" "current segment" nil))) (om-make-point 168 280) nil nil "l" nil 1))) (setf (frame-position newbox) (om-make-point 168 280)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LINKED-SEGMENTS 2" (quote t2l::linked-segments) (quote ((om-load-inputfun (quote input-funbox) "" "RULE" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCES" nil))) (om-make-point 245 349) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 427 279) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 270 127) (om-make-point 38 28) 127 "127" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 252 127) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-TEMPLATE" (quote t2l::om-template) (quote ((om-load-inputfun (quote input-funbox) "" "TEMPLATE" nil) (om-load-inputkeyword (quote input-keyword) "" "min" (quote :min) nil nil) (om-load-inputkeyword (quote input-keyword) "" "max" (quote :max) nil nil))) (om-make-point 220 157) nil nil "l" nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 272 223) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 719 142) (om-make-point 58 28) (list 62 74) "(62 74)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 521 142) (om-make-point 93 28) (list 64 (list (quote ?y1) (quote ?y2))) "(64 (?y1 ?y2))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 463 142) (om-make-point 93 28) (list 65 (list (quote ?y1) (quote ?y2))) "(65 (?y1 ?y2))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 405 112) (om-make-point 135 28) (list 67 (list (quote ?y1) (quote ?y2) (quote ?y3) (quote ?y4))) "(67 (?y1 ?y2 ?y3 ?y4))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 347 142) (om-make-point 58 28) (list 62 74) "(62 74)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 293 172) (om-make-point 346 42) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 1 nil 0) (2 0 0 2 nil 0) (28 0 4 1 nil 0) (7 0 5 8 nil 0) (7 0 6 8 nil 0) (23 0 14 0 nil 0) (16 0 15 1 nil 0) (17 0 18 1 nil 0) (20 0 18 2 nil 0) (19 0 20 1 nil 0) (25 0 21 0 nil 0) (28 0 22 0 nil 0) (3 0 22 2 nil 0) (22 0 25 0 nil 0) (27 0 25 1 nil 0) (28 0 25 2 nil 0) (26 0 27 0 nil 0) (32 0 27 1 nil 0) (32 0 28 0 nil 0) (30 0 31 1 nil 0) (29 0 31 2 nil 0) (31 0 32 0 nil 0) (38 0 32 1 nil 0) (37 0 38 0 nil 0) (36 0 38 1 nil 0) (35 0 38 2 nil 0) (34 0 38 3 nil 0) (33 0 38 4 nil 0))) nil 6.16))