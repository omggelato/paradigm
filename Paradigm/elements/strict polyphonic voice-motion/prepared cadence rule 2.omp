; OM File Header - Saved 2023/10/27 23:11:18
; (6.16 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 500 255) "" 908 0 nil "2023/10/27 23:11:17")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"prepared cadence rule.omp\"" "#P\"define environment for rules.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "prepared cadence rule 2" (quote ((let ((box (om-load-boxcall (quote abstraction) "prepared cadence rule" (om-load-patch-abs1 "prepared cadence rule" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 519/2) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 81 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "prepared cadence rule" (quote ("elements" "strict polyphonic voice-motion" "prepared cadence rule")) (quote ((om-load-inputfun (quote input-funbox) "" "voice1" nil) (om-load-inputfun (quote input-funbox) "" "voice2" nil) (om-load-inputfun (quote input-funbox) "" "vertical-intervals" nil) (om-load-inputfun (quote input-funbox) "" "voice-intervals" nil) (om-load-inputfun (quote input-funbox) "" "vertical-intervals%12" nil) (om-load-inputfun (quote input-funbox) "" "horizontal-intervals%12" nil) (om-load-inputfun (quote input-funbox) "" "horizontal-intervals-scale-degrees" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 596 495/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "define environment for rules" (quote ("elements" "strict polyphonic voice-motion" "define environment for rules")) (quote ((om-load-inputfun (quote input-funbox) "" "voice1 and voice2" (list (list (list 60 64) 67 60) (list 72 71 72))))) (om-make-point 576 291/2) nil nil nil nil 8))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (3 1 2 1 nil 0) (3 2 2 2 nil 0) (3 3 2 3 nil 0) (3 4 2 4 nil 0) (3 5 2 5 nil 0) (3 6 2 6 nil 0) (3 7 2 7 nil 0) (1 0 3 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 721 769/2)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 185 247/2) nil nil nil "prepared cadence rule"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 54 465/2) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 85 23) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) nil 6.16))