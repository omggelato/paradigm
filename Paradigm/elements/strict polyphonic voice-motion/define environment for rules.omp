; OM File Header - Saved 2023/10/27 23:11:17
; (6.16 :patc (om-make-point 68 150) (om-make-point 462 186) (om-make-point 699 248) "" 147 0 "2022/10/06 19:58:23" "2023/10/27 23:11:17")
; End File Header
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "define environment for rules" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 381 294) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?LIST%" (quote ?list%) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "VALUE" nil))) (om-make-point 359 324) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLATTEN-SEQC" (quote flatten-seqc) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 167 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "subtract" (om-load-patch-abs1 "subtract" (quote ((let ((box (om-load-boxcall (quote genfun) "?ABS" (quote ?abs) (quote ((om-load-inputfun (quote input-funbox) "" "K" nil))) (om-make-point 232 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?-" (quote ?-) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 264 191) (om-make-point 20 50) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 127 277) (om-make-point 31 28) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 107 307) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR 2" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 240 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADR 2" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 180 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 93 242) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 140 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 80 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 66 375) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 66 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 1 0 nil 0) (4 0 1 1 nil 0) (6 0 3 0 nil 0) (0 0 3 1 nil 0) (2 0 3 2 nil 0) (10 0 4 0 nil 0) (10 0 5 0 nil 0) (8 0 6 0 nil 0) (7 0 6 1 nil 0) (10 0 7 0 nil 0) (10 0 8 0 nil 0) (3 0 9 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 425 262)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 111 187) nil (list nil) "l" "subtract"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 147 254) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "listdx" (om-load-patch-abs1 "listdx" (quote ((let ((box (om-load-boxcall (quote lispfun) "LISTDXV 2" (quote t2l::listdxv) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 120 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 49 290) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice" 0 (om-make-point 50 50) "" "voice" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 304 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (2 0 3 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 428 347)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 211 203) nil (list nil) "l" "listdx"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 235 275) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 151 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 83 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 14 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 8" 7 (om-make-point 590 400) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "parameter 8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 7" 6 (om-make-point 515 400) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "parameter 7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 6" 5 (om-make-point 445 400) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "parameter 6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 5" 4 (om-make-point 315 400) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "verticle-intervals%12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 4" 3 (om-make-point 215 400) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "voice-intervals" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 115 400) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "vertical-intervals2x" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 75 400) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "voice2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice1 and voice2" 0 (om-make-point 253 32) "" "voice1 and voice2" (list (list (list 60 64) 67 60) (list 72 71 72)) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 5 400) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "voice1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (0 0 1 1 nil 0) (17 0 2 0 nil 0) (3 0 4 0 nil 0) (7 0 4 1 nil 0) (5 0 6 0 nil 0) (17 0 6 1 nil 0) (2 0 7 0 nil 0) (17 0 8 0 nil 0) (17 0 9 0 nil 0) (1 0 13 0 nil 0) (6 0 14 0 nil 0) (4 0 15 0 nil 0) (8 0 16 0 nil 0) (9 0 18 0 nil 0))) nil 6.16))