; OM File Header - Saved 2023/10/27 23:11:18
; (6.16 :patc (om-make-point 1164.9688 10) (om-make-point 141 70) (om-make-point 712 389) "" 908 0 "2021/06/09 16:46:52" "2023/10/27 23:11:18")
; End File Header
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "tritones across voices" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "fix") "" (om-make-point 535 141) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAP?AND" (quote map?and) (quote ((om-load-inputfun (quote input-funbox) "" "FN" nil) (om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 282 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "tritones across 2 voices" (om-load-patch-abs1 "tritones across 2 voices" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 370 350) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 35 28) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "process 3 dyads" (om-load-lisp-abspatch "process 3 dyads" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (list)$  (let* ((xs (mapcar #'car list))$         (ys (mapcar #'cadr list))$         (x1 (car xs))$         (x2 (cadr xs))$         (x3 (caddr xs))$         (y1 (car ys))$         (y2 (cadr ys))$         (y3 (caddr ys)))$    (alert2 (format nil \"((~A ~A ~A)(~A ~A ~A))\" x1 x2 x3 y1 y2 y3))$    (labels$        ((eequalp (&rest xs)$           (every #'(lambda (x) (not (null x)))$                  (mapcar #'(lambda (ys)$                              (equalp (car ys) (cadr ys)))$                          (t2l::cartx2 xs))))$         (interval-difference%12 (x y)$           (t2l::%v (t2l::om-v y x) 12))$         (descending? (x1 x2) (t2l::om<v x2 x1))$         (ascending? (x1 x2) (t2l::om>v x2 x1))$         (m2-step (x1 x2) (screamer:andv (t2l::om/=v x1 x2)$                                        (t2l::om=v (t2l::om-v x2 x1) 1)$                                        (t2l::om=v (t2l::om-v x2 x1) -1)))$         (a-step (x1 x2) (screamer:andv (t2l::om/=v x1 x2)$                                        (t2l::all-betweenv (t2l::om-v x2 x1) -2 2)))$         (a-leap (x1 x2) (screamer:andv (t2l::om/=v x1 x2)$                                        (screamer:orv$                                         (t2l::om>v (t2l::om-v x2 x1) 2)$                                         (t2l::om<v (t2l::om-v x2 x1) -2)))))$      (cond$       ((some #'null (list x1 x2 x3 y1 y2 y3)) t)$       $       ((eequalp x1 x2 x3 y1 y2 y3)$        (t2l::print-warning \"#1\")$        T)$$       ((or (eequalp x1 x2 x3)$            (eequalp y1 y2 y3)) $        (t2l::print-warning \"#2\")$        (screamer:notv$         (screamer:=v $          6$          (t2l::%v $           (t2l::om-v y2 x2) $           12))))$       $       ((equalp x1 x2)$        (t2l::print-warning \"#3\")$        (screamer:orv$         (screamer:notv (t2l::om=v 6 (interval-difference%12 y2 x2)))$         (screamer:andv (t2l::om=v 6 (interval-difference%12 y2 x2))$                        (m2-step x2 x3))))       $       $       ((equalp y1 y2)$        (t2l::print-warning \"#4\")$        (screamer:orv$         (screamer:notv (t2l::om=v 6 (interval-difference%12 y2 x2)))$         (screamer:andv (t2l::om=v 6 (interval-difference%12 y2 x2))$                        (m2-step y2 y3))))       $                                               $       (T $        (t2l::print-warning \"LAST\")$        (screamer:orv$         (screamer:notv (t2l::om=v 6 (interval-difference%12 y2 x2)))$         (screamer:andv (t2l::om=v 6 (interval-difference%12 y2 x2))$                        (screamer:orv$                         (screamer:andv$                          (a-step x1 x2)$                          (a-step y1 y2)$                          (m2-step x2 x3)$                          (m2-step y2 y3)$                          (screamer:orv (screamer:andv$                                         (ascending? y2 y3)$                                         (descending? x2 x3))$                                        (screamer:andv$                                         (descending? y2 y3)$                                         (ascending? x2 x3))))))))))))") (quote ((om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 128 202) nil (list nil) "l" "process 3 dyads"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 251 196) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 242 196) (om-make-point 26 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NSUCC" (quote nsucc) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "N" nil) (om-load-inputkeyword (quote input-keyword) "" "step" (quote :step) nil nil))) (om-make-point 228 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAP?AND" (quote map?and) (quote ((om-load-inputfun (quote input-funbox) "" "FN" nil) (om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 171 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLATTEN-SEQC" (quote t2l::flatten-seqc) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 192 98) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 196 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (8 0 5 0 nil 0) (4 0 5 1 nil 0) (3 0 5 2 nil 0) (2 0 6 0 nil 0) (5 0 6 1 nil 0) (1 0 7 0 nil 0) (7 0 8 0 nil 0))) 6.16 nil "" (om-make-point 49 89) (om-make-point 495 415)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1593/7 1317/7) nil nil "l" "tritones across 2 voices"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "COMBINATIONS-OF2" (quote combinations-of2) (quote ((om-load-inputfun (quote input-funbox) "XS" "XS" nil))) (om-make-point 366 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 326 420) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "sequence" 0 (om-make-point 5 45) "" "sequence" (list 62 67 65 64 65 64 62) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (3 0 1 1 nil 0) (5 0 3 0 nil 0) (1 0 4 0 nil 0))) nil 6.16))