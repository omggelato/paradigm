; OM File Header - Saved 2022/12/24 22:52:32
; (7.02 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 500 320) "" 908 0 nil "2022/11/30 3:33:53")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"is a full triad.omp\""))
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "first and last triads are full triads" (quote ((let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 117 221) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLATTEN-SEQC" (quote t2l::flatten-seqc) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 99 152) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "last-pcset" 2 (om-make-point 376 44) "" "last-pcset" (list 0 4 7) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "first-pcset" 1 (om-make-point 195 45) "" "first-pcset" (list 0 4 7) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 253 408) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMANDV" (quote t2l::omandv) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 279 287) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LAST-ELEM 2" (quote last-elem) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 315 144) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR 2" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 230 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is a full triad" (quote ("elements" "paradigms" "myparadigm 3" "is a full triad")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "pc-set" nil))) (om-make-point 227 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is a full triad 2" (quote ("elements" "paradigms" "myparadigm 3" "is a full triad")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "pc-set" nil))) (om-make-point 327 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 1 0 nil 0) (6 0 4 0 nil 0) (9 0 6 0 nil 0) (10 0 6 1 nil 0) (0 0 7 0 nil 0) (0 0 8 0 nil 0) (8 0 9 0 nil 0) (3 0 9 1 nil 0) (7 0 10 0 nil 0) (2 0 10 1 nil 0))) nil 6.16))
