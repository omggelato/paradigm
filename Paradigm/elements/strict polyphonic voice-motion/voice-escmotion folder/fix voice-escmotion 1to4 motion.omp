; OM File Header - Saved 2022/11/08 18:05:55
; (6.16 :patc (om-make-point 10 10) (om-make-point 50 50) (om-make-point 516 398) "" 183 0 "2022/11/04 20:22:59" "2022/11/08 18:05:55")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:voice-escmotion.omp\""))
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "fix voice-escmotion 1to4 motion" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 346 214) (om-make-point 206 28) (list (list 62 62 62 62 65) (list 62 65 64 69 74)) "((62 62 62 62 65) (62 65 64 69 74))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote patch-box) "1to4p" (quote ("elements" "paradigms" "textural motion i" "voice-escmotion folder" "1to4p")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 62 62 62 62 59) (list 66 67 64 66 67))))) (om-make-point 332 244) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 332 244)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HIDE-WARNINGS" (quote t2l::hide-warnings) (quote nil) (om-make-point 398 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRINT-WARNINGS" (quote t2l::print-warnings) (quote nil) (om-make-point 305 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote patch-box) "define environment for rules" (quote ("elements" "paradigms" "textural motion i" "define environment for textural motion i")) (quote ((om-load-inputfun (quote input-funbox) "" "voice1 and voice2" (list (list (list 60 62) 67) (list 72 71))))) (om-make-point 66 166) nil nil nil nil 8))) (setf (frame-position newbox) (om-make-point 66 166)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "voice-escmotion" (quote ("elements" "paradigms" "textural motion i" "voice-escmotion folder" "voice-escmotion")) (quote ((om-load-inputfun (quote input-funbox) "" "voice1" (list 60)) (om-load-inputfun (quote input-funbox) "" "voice2" (list (list 67 66))) (om-load-inputfun (quote input-funbox) "" "vertical-intervals" nil) (om-load-inputfun (quote input-funbox) "" "voice-intervals" (list (list 3 -6 -5 3) (list 0 5 6 0))) (om-load-inputfun (quote input-funbox) "" "vertical-intervals%12" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 119 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sequence" (om-load-lisp-abspatch "sequence" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda ()$  '((62 65 64 62 67 65 69 67 65 64 62) $    ((62 65 64 69) (74 69 67 65) (67 72 65 64) (65 69 67 70) (70 74 69 67) (69 72 67 74) (77 72 70 69) (70 74 69 67) (74 69 67 65) (67 69 70 72) (74))))") (quote nil) (om-make-point 132 75) nil (list (list (list 62 65 64 62 67 65 69 67 65 64 62) (list (list 62 65 64 69) (list 74 69 67 65) (list 67 72 65 64) (list 65 69 67 70) (list 70 74 69 67) (list 69 72 67 74) (list 77 72 70 69) (list 70 74 69 67) (list 74 69 67 65) (list 67 69 70 72) (list 74)))) nil "sequence"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (6 0 4 0 nil 0) (4 0 5 0 nil 0) (4 1 5 1 nil 0) (4 2 5 2 nil 0) (4 3 5 3 nil 0) (4 4 5 4 nil 0) (4 5 5 5 nil 0) (4 6 5 6 nil 0) (4 7 5 7 nil 0))) nil 6.16))