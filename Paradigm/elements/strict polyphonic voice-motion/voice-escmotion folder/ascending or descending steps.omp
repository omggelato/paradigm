; OM File Header - Saved 2022/11/08 18:05:55
; (6.16 :patc (om-make-point 490.0 10) (om-make-point 50 50) (om-make-point 500 340) "" 183 0 nil "2022/11/08 18:05:55")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:../is a step.omp\""))
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "ascending or descending steps" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 13 362) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 10 30) "" "input" (list 60 62 64 65 67) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMANDV" (quote t2l::omandv) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 116 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMORV" (quote t2l::omorv) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 243 235) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL>V" (quote t2l::all>v) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 286 98) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL<V" (quote t2l::all<v) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 212 97) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is a step 4" (quote ("elements" "paradigms" "textural motion i" "is a step")) (quote ((om-load-inputfun (quote input-funbox) "" "x1" nil) (om-load-inputfun (quote input-funbox) "" "x2" nil))) (om-make-point 166 180) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is a step 3" (quote ("elements" "paradigms" "textural motion i" "is a step")) (quote ((om-load-inputfun (quote input-funbox) "" "x1" nil) (om-load-inputfun (quote input-funbox) "" "x2" nil))) (om-make-point 116 180) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is a step 2" (quote ("elements" "paradigms" "textural motion i" "is a step")) (quote ((om-load-inputfun (quote input-funbox) "" "x1" nil) (om-load-inputfun (quote input-funbox) "" "x2" nil))) (om-make-point 66 180) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is a step" (quote ("elements" "paradigms" "textural motion i" "is a step")) (quote ((om-load-inputfun (quote input-funbox) "" "x1" nil) (om-load-inputfun (quote input-funbox) "" "x2" nil))) (om-make-point 16 180) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS 5" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 65 115) nil nil nil nil 5))) (setf (numouts box) 5) box))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (9 0 2 0 nil 0) (8 0 2 1 nil 0) (7 0 2 2 nil 0) (6 0 2 3 nil 0) (3 0 2 4 nil 0) (5 0 3 0 nil 0) (4 0 3 1 nil 0) (1 0 4 0 nil 0) (1 0 5 0 nil 0) (10 3 6 0 nil 0) (10 4 6 1 nil 0) (10 2 7 0 nil 0) (10 3 7 1 nil 0) (10 1 8 0 nil 0) (10 2 8 1 nil 0) (10 0 9 0 nil 0) (10 1 9 1 nil 0) (1 0 10 0 nil 0))) nil 6.16))