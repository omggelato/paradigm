; OM File Header - Saved 2023/10/27 23:11:18
; (6.16 :patc (om-make-point 280 110) (om-make-point 50 50) (om-make-point 500 300) "" 908 0 "2022/12/30 17:25:46" "2023/10/27 23:11:18")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"../voice-escmotion 3.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "print inputs to voice-escmotion" (quote ((let ((box (om-load-boxcall (quote abstraction) "print input" (om-load-patch-abs1 "print input" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 181 185) (om-make-point 26 28) (quote t) "T" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 149 215) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 141 79) (om-make-point 168 28) " group-by-motion-type: ~A" "\" group-by-motion-type: ~A\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FORMAT" (quote format) (quote ((om-load-inputfun (quote input-funbox) "DESTINATION" "DESTINATION" nil) (om-load-inputfun (quote input-funbox) "CONTROL-STRING" "CONTROL-STRING" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 125 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 123 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 191 274) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (0 0 1 1 nil 0) (2 0 3 1 nil 0) (6 0 3 2 nil 0) (3 0 4 0 nil 0) (1 1 5 0 nil 0))) 6.16 nil "" (om-make-point 622 93) (om-make-point 500 360)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 147 66) nil nil "l" "print input"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "'T'" (om-load-patch-abs1 "'T'" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 21 210) (om-make-point 26 28) (quote t) "T" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0))) 6.16 nil "" (om-make-point 468 103) (om-make-point 400 460)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 97 66) nil nil "l" "'T'"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "voice-escmotion" (quote ("elements" "strict polyphonic voice-motion" "voice-escmotion 3")) (quote ((om-load-inputfun (quote input-funbox) "" "sequence" nil) (om-load-inputfun (quote input-funbox) "" "select-motion-type fn" nil) (om-load-inputfun (quote input-funbox) "" "rule-definition fn" nil))) (om-make-point 56 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 88 245) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "sequence" 0 (om-make-point 21 27) "" "sequence" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 2 0 nil 0) (1 0 2 1 nil 0) (0 0 2 2 nil 0) (2 0 3 0 nil 0))) nil 6.16))