; OM File Header - Saved 2022/12/30 3:32:07
; (6.16 :patc (om-make-point 205.0 10) (om-make-point 457 125) (om-make-point 628 225) "" 908 0 "2022/10/07 0:50:12" "2022/12/25 12:33:49")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:xto1-motion.omp\"" "#P\"C:is xto1.omp\"" "#P\"C:1tox-motion.omp\"" "#P\"C:is 1tox.omp\"" "#P\"C:2to1-motion.omp\"" "#P\"C:is 2to1.omp\"" "#P\"C:4to1-motion.omp\"" "#P\"C:is 4to1.omp\"" "#P\"C:1to1-motion.omp\"" "#P\"C:is 1to1.omp\"" "#P\"C:1to2-motion.omp\"" "#P\"C:is 1to2.omp\"" "#P\"C:suspensions.omp\"" "#P\"C:1to4-motion.omp\"" "#P\"C:is a suspension.omp\"" "#P\"C:is 1to4.omp\""))
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "voice-escmotion" (quote ((let ((box (om-load-boxcall (quote lispfun) "COMBINATIONS-OF2" (quote combinations-of2) (quote ((om-load-inputfun (quote input-funbox) "XS" "XS" nil))) (om-make-point 181 159) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAP?AND" (quote map?and) (quote ((om-load-inputfun (quote input-funbox) "" "FN" nil) (om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 142 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch 2" (om-load-patch-abs1 "mypatch 2" (quote ((let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 186 71) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 28 283) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAP?AND" (quote map?and) (quote ((om-load-inputfun (quote input-funbox) "" "FN" nil) (om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 145 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GROUP-BY-MOTION-TYPE" (quote group-by-motion-type) (quote ((om-load-inputfun (quote input-funbox) "" "VOICE1" nil) (om-load-inputfun (quote input-funbox) "" "VOICE2" nil))) (om-make-point 163 131) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 79 255) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "process sequence-list" (om-load-patch-abs1 "process sequence-list" (quote ((let ((box (om-load-boxcall (quote genfun) "OMIF 8" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 412 520) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "xto1-motion" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "xto1-motion")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 62 62 62 62 60) (list 62 64 65 67 69))))) (om-make-point 396 448) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is xto1" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "is xto1")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 62 62 62 62 59) (list 66 67 64 66 67))))) (om-make-point 353 448) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 7" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 301 518) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "1tox-motion" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "1tox-motion")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 62 62 62 62 60) (list 62 64 65 67 69))))) (om-make-point 285 448) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is 1tox" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "is 1tox")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 62 62 62 62 59) (list 66 67 64 66 67))))) (om-make-point 242 448) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "2to1-motion" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "2to1-motion")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 640 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is 2to1" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "is 2to1")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 62 62 60) (list 69 70 72))))) (om-make-point 599 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 6" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 657 349) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 5" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 208 649) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "4to1-motion" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "4to1-motion")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 62 62 62 62 60) (list 62 64 65 67 69))))) (om-make-point 191 577) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is 4to1" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "is 4to1")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 62 62 62 62 59) (list 66 67 64 66 67))))) (om-make-point 153 577) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "no-evaluation" (om-load-patch-abs1 "no-evaluation" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 87 206) (om-make-point 26 28) (quote t) "T" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 71 236) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 3848/5 794/5) nil nil nil "no-evaluation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 4" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 714 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "1to1-motion" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "1to1-motion")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list (quote x1) (quote y1)) (list (quote x2) (quote y2)) (list (quote x2) (quote y3)))))) (om-make-point 697 157) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is 1to1" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "is 1to1")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 65 60) (list 69 67))))) (om-make-point 654 157) nil nil nil "is 1to1" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "1to2-motion" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "1to2-motion")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 534 279) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 3" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 551 349) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is 1to2" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "is 1to2")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 65 65 60) (list 69 70 72))))) (om-make-point 498 279) nil nil nil "is 1to2" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "suspensions" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "suspensions")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 463 345) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "1to4-motion" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "1to4-motion")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 77 578) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 479 416) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is a suspension" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "is a suspension")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 65 60) (list 69 67))))) (om-make-point 373 345) nil nil nil "is a suspension" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 94 648) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 28 718) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "sequence-list" 0 (om-make-point 10 34) "" "sequence-list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is 1to4" (quote ("elements" "paradigms" "myparadigm 3" "voice-escmotion folder" "is 1to4")) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list (list 62 62 62 62 59) (list 66 67 64 66 67))))) (om-make-point 37 578) nil nil nil "is 1to4" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 0 1 nil 0) (21 0 0 2 nil 0) (25 0 1 0 nil 0) (25 0 2 0 nil 0) (5 0 3 0 nil 0) (4 0 3 1 nil 0) (0 0 3 2 nil 0) (25 0 4 0 nil 0) (25 0 5 0 nil 0) (25 0 6 0 nil 0) (25 0 7 0 nil 0) (7 0 8 0 nil 0) (6 0 8 1 nil 0) (13 0 8 2 nil 0) (11 0 9 0 nil 0) (10 0 9 1 nil 0) (3 0 9 2 nil 0) (25 0 10 0 nil 0) (25 0 11 0 nil 0) (25 0 12 0 nil 0) (15 0 13 0 nil 0) (14 0 13 1 nil 0) (12 0 13 2 nil 0) (25 0 14 0 nil 0) (25 0 15 0 nil 0) (25 0 16 0 nil 0) (18 0 17 0 nil 0) (16 0 17 1 nil 0) (8 0 17 2 nil 0) (25 0 18 0 nil 0) (25 0 19 0 nil 0) (25 0 20 0 nil 0) (22 0 21 0 nil 0) (19 0 21 1 nil 0) (17 0 21 2 nil 0) (25 0 22 0 nil 0) (26 0 23 0 nil 0) (20 0 23 1 nil 0) (9 0 23 2 nil 0) (23 0 24 0 nil 0) (25 0 26 0 nil 0))) 6.16 nil "" (om-make-point 0 0) (om-make-point 667 680)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 28 182) nil (list nil) nil "process sequence-list"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (0 0 2 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 380)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 124 108) nil nil "l" "mypatch"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (5 0 3 0 nil 0) (4 0 3 1 nil 0) (0 0 4 0 nil 0) (0 1 4 1 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 519 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 220/3 128) nil nil "l" "mypatch 2"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 44 299) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 214 85) "" "input" (list 60) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (2 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 3 0 nil 0))) nil 6.16))
