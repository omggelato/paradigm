; OM File Header - Saved 2023/10/27 23:11:17
; (6.16 :patc (om-make-point 172 60) (om-make-point 50 50) (om-make-point 516 378) "" 183 0 "2022/12/30 2:57:43" "2023/10/27 23:11:17")
; End File Header
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "interval%12" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 269 213) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?% 3" (quote ?%) (quote ((om-load-inputfun (quote input-funbox) "" "N" nil) (om-load-inputfun (quote input-funbox) "" "D" nil))) (om-make-point 257 243) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?- 2" (quote ?-) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 236 189) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?MIN" (quote ?min) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 279 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?MAX" (quote ?max) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 198 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "?-" (om-load-patch-abs1 "?-" (quote ((let ((box (om-load-boxcall (quote genfun) "?MIN" (quote ?min) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 134 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 50 147) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "y%12" 1 (om-make-point 122 50) "" "y%12" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x%12" 0 (om-make-point 62 50) "" "x%12" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?-" (quote ?-) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 104 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?MAX" (quote ?max) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 81 106) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 0 1 nil 0) (4 0 1 0 nil 0) (5 0 4 0 nil 0) (0 0 4 1 nil 0) (3 0 5 0 nil 0) (2 0 5 1 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 247 265)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 95/2 471/2) nil nil nil "?-"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 5 310) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 89 113) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?% 2" (quote ?%) (quote ((om-load-inputfun (quote input-funbox) "" "N" nil) (om-load-inputfun (quote input-funbox) "" "D" nil))) (om-make-point 77 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 29 113) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?%" (quote ?%) (quote ((om-load-inputfun (quote input-funbox) "" "N" nil) (om-load-inputfun (quote input-funbox) "" "D" nil))) (om-make-point 17 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "y" 1 (om-make-point 55 45) "" "y" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x" 0 (om-make-point 5 45) "" "x" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (0 0 1 1 nil 0) (4 0 2 0 nil 0) (3 0 2 1 nil 0) (12 0 3 0 nil 0) (11 0 3 1 nil 0) (12 0 4 0 nil 0) (11 0 4 1 nil 0) (10 0 5 0 nil 0) (8 0 5 1 nil 0) (1 0 6 0 nil 0) (11 0 8 0 nil 0) (7 0 8 1 nil 0) (12 0 10 0 nil 0) (9 0 10 1 nil 0))) nil 6.16))