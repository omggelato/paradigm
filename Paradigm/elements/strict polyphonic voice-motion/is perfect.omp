; OM File Header - Saved 2022/12/25 6:20:33
; (6.16 :patc (om-make-point 10 160) (om-make-point 215 97) (om-make-point 455 325) "" 908 0 "2022/10/07 3:59:14" "2022/12/25 6:20:33")
; End File Header
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "is perfect" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 124 247) (om-make-point 26 28) (quote t) "T" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?/=" (quote ?/=) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 238 144) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?AND" (quote ?and) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 170 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 113 222) (om-make-point 55 28) (list 0 5 7) "(0 5 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?ITEMS-IN" (quote ?items-in) (quote ((om-load-inputfun (quote input-funbox) "" "LIST" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil) (om-load-inputkeyword (quote input-keyword) "" "numeric" (quote :numeric) nil nil))) (om-make-point 86 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 85 181) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?%" (quote ?%) (quote ((om-load-inputfun (quote input-funbox) "" "N" nil) (om-load-inputfun (quote input-funbox) "" "D" nil))) (om-make-point 73 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?ABS" (quote ?abs) (quote ((om-load-inputfun (quote input-funbox) "" "K" nil))) (om-make-point 60 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "?-" (quote ?-) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 50 99) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "y" 1 (om-make-point 26 28) "" "y" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "x" 0 (om-make-point 75 28) "" "x" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 58 409) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 1 0 nil 0) (10 0 1 1 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (6 0 4 0 nil 0) (3 0 4 1 nil 0) (0 0 4 2 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (8 0 7 0 nil 0) (9 0 8 0 nil 0) (10 0 8 1 nil 0) (2 0 11 0 nil 0))) nil 6.16))