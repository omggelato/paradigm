; OM File Header - Saved 2022/12/24 22:52:32
; (6.16 :patc (om-make-point 10 210) (om-make-point 519 20) (om-make-point 563 320) "" 183 0 "2022/11/27 3:14:12" "2022/11/27 11:04:02")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:is a full triad.omp\""))
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "is a full triad" (quote ((let ((box (om-load-boxcall (quote genfun) "MAP-ORV" (quote t2l::map-orv) (quote ((om-load-inputfun (quote input-funbox) "" "FN" nil) (om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 218 305) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "all transposition levels" (om-load-lisp-abspatch "all transposition levels" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (pcset)$  (mapcar #'(lambda (transposition-level)$              (mapcar #'(lambda (x) (mod x 12))$                      (om+ pcset transposition-level)))$  (arithm-ser 0 11 1)))") (quote ((om-load-inputfun (quote input-funbox) "" "PCSET" nil))) (om-make-point 260 128) nil (list (list (list 0 4 7) (list 1 5 8) (list 2 6 9) (list 3 7 10) (list 4 8 11) (list 5 9 0) (list 6 10 1) (list 7 11 2) (list 8 0 3) (list 9 1 4) (list 10 2 5) (list 11 3 6))) nil "all transposition levels"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 80 214) (om-make-point 26 28) (quote t) "T" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 60 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 163 138) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST%V" (quote t2l::list%v) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "VALUE" nil))) (om-make-point 141 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIND-ALL" (quote t2l::find-all) (quote ((om-load-inputfun (quote input-funbox) "" "I" nil) (om-load-inputfun (quote input-funbox) "" "FORM1" nil))) (om-make-point 360 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 428 48) (om-make-point 74 28) (list 60 64 67) "(60 64 67)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 514 78) (om-make-point 55 28) (list 0 4 7) "(0 4 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "is a full triad" (quote ("elements" "paradigms" "myparadigm 3" "is a full triad")) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "pc-set" nil))) (om-make-point 470 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcall (quote genfun) "MEMBER-OF-NUMBER-SEQUENCEV 3" (quote t2l::member-of-number-sequencev) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil))) (om-make-point 464 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MEMBER-OF-NUMBER-SEQUENCEV 2" (quote t2l::member-of-number-sequencev) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil))) (om-make-point 303 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MEMBER-OF-NUMBER-SEQUENCEV" (quote t2l::member-of-number-sequencev) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil))) (om-make-point 163 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 52 407) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pcset" 1 (om-make-point 401 50) "" "pcset" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 100 50) "" "input" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-INTEGER-ITEMS-INV" (quote t2l::all-integer-items-inv) (quote ((om-load-inputfun (quote input-funbox) "" "LIST" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil))) (om-make-point 59 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 193 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 329 148) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CADDR" (quote caddr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 483 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMANDV" (quote t2l::omandv) (quote ((om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil) (om-load-inputfun (quote input-funbox) "" "XS" nil))) (om-make-point 218 327) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 0 0 nil 0) (5 0 0 1 nil 0) (8 0 1 0 nil 0) (5 0 1 1 nil 0) (7 0 2 0 nil 0) (5 0 2 1 nil 0) (10 0 3 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (4 0 7 0 nil 0) (4 0 8 0 nil 0) (4 0 9 0 nil 0) (6 0 10 0 nil 0) (2 0 10 1 nil 0) (1 0 10 2 nil 0) (0 0 10 3 nil 0))) 6.16 nil "" (om-make-point 600 203) (om-make-point 613 411)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 1655/9 673/3) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 95 77) (om-make-point 31 28) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 84 107) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 5 310) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pc-set" 1 (om-make-point 225 18) "" "pc-set" (list 0 4 7) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (1 0 0 1 nil 0) (14 0 1 0 nil 0) (12 0 3 0 nil 0) (0 0 3 1 nil 0) (2 0 3 2 nil 0) (12 0 5 0 nil 0) (4 0 5 1 nil 0) (9 0 6 1 nil 0) (7 0 9 0 nil 0) (8 0 9 1 nil 0) (5 0 10 0 nil 0) (11 0 12 0 nil 0) (15 0 12 1 nil 0) (3 0 13 0 nil 0))) nil 6.16))
