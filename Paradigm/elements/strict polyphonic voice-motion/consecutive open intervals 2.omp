; OM File Header - Saved 2023/10/27 23:11:17
; (6.16 :patc (om-make-point 603.9844 610) (om-make-point 493 174) (om-make-point 533 215) "" 908 0 "2022/11/28 22:19:55" "2023/10/27 23:11:17")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"consecutive open intervals 2.omp\""))
(in-package :om)(load-lib-for (quote ("myextension")))(setf *om-current-persistent* (om-load-patch1 "consecutive open intervals 2" (quote ((let ((box (om-load-boxcall (quote genfun) "MAP?AND" (quote map?and) (quote ((om-load-inputfun (quote input-funbox) "" "FN" nil) (om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 187 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 254 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "consecutive open intervals" (quote ("elements" "strict polyphonic voice-motion" "consecutive open intervals 2")) (quote ((om-load-inputfun (quote input-funbox) "" "sequence" (list (list 60 62 64) (list 67 65 64) (list 72 72 72))))) (om-make-point 331 92) nil nil nil "consecutive open intervals 2" 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 282 43) (om-make-point 199 28) (list (list 60 62 64) (list 67 65 64) (list 72 72 72)) "((60 62 64) (67 65 64) (72 72 72))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "consecutive open intervals between 2 voices" (om-load-patch-abs1 "consecutive open intervals between 2 voices" (quote ((let ((box (om-load-boxcall (quote genfun) "MAPLIST?AND" (quote maplist?and) (quote ((om-load-inputfun (quote input-funbox) "" "FN" nil) (om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 101 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "process first two chords" (om-load-lisp-abspatch "process first two chords" 6.16 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (chord-list)$  (if (or (not (cdr chord-list))$          (t2l::has-null-values (flatt$                                 (list (car chord-list)$                                       (cadr chord-list)))))$      T$    (labels$        ((interval%12 (x y)$           (?% (?- (?max (?% x 12)$                         (?% y 12)) $                   (?min (?% x 12)$                         (?% y 12))) 12)))$    (let ((chord1 (car chord-list))$          (chord2 (cadr chord-list)))$      (let ((chords-repeat (?and (?= (car chord1) (car chord2))$                                 (?= (cadr chord1) (cadr chord2))))$            ; (chords-repeat (?equal chord1 chord2))$            (interval1 (interval%12 (car chord1)$                                    (cadr chord1)))$            (interval2 (interval%12 (car chord2)$                                    (cadr chord2))))$        (?or (?and$              (?not chords-repeat)$              (?not (?and (?= interval1 7)$                          (?= interval2 7)))$              (?not (?and (?= interval1 0)$                          (?= interval2 0))))$             chords-repeat)))))))$                    ") (quote ((om-load-inputfun (quote input-funbox) "" "CHORD-LIST" nil))) (om-make-point 4 173) nil nil "l" "process first two chords"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 145 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLATTEN-SEQC" (quote t2l::flatten-seqc) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 141 130) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 17 327) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice1 voice2" 0 (om-make-point 5 45) "" "voice1 voice2" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 0 1 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (0 0 4 0 nil 0))) 6.16 nil "" (om-make-point 484 75) (om-make-point 281 349)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 38 175) nil nil "l" "consecutive open intervals between 2 voices"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "COMBINATIONS-OF2" (quote t2l::combinations-of2) (quote ((om-load-inputfun (quote input-funbox) "XS" "XS" nil))) (om-make-point 243 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 3 348) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "sequence" 0 (om-make-point 0 34) "" "sequence" (list (list 60 62 64) (list 67 65 64) (list 72 72 72)) nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (5 0 0 1 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0) (7 0 5 0 nil 0) (0 0 6 0 nil 0))) nil 6.16))